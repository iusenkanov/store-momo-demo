{"remainingRequest":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/src/components/catalog/Filters.vue?vue&type=template&id=2ebbda0d&ts=true","dependencies":[{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/src/components/catalog/Filters.vue","mtime":1743484457791},{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/babel-loader/lib/index.js","mtime":1743485462509},{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/ts-loader/index.js","mtime":1743485460995},{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1743485461143},{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1743485460826},{"path":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1743485460970}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cg=="},{"version":3,"sources":["/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/src/components/catalog/Filters.vue"],"names":[],"mappings":"","file":"/Users/iskenderusenkanov/Kubernetes/momo-store-demo/frontend/src/components/catalog/Filters.vue","sourceRoot":"","sourcesContent":["<template>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\n\nimport CategoriesService from '@/services/resources/categories.service';\nimport CategoryModel from '@/models/category.model';\n\nconst categoriesService = new CategoriesService();\n\nexport default defineComponent({\n  name: 'Filters',\n  created() {\n    this.fetchCategories();\n  },\n  data() {\n    const categories: CategoryModel[] = [];\n    const selected: number[] = [];\n    return {\n      categories,\n      loading: true,\n      selected\n    }\n  },\n  emits: [\n    'change'\n  ],\n  methods: {\n    async fetchCategories() {\n      this.loading = true;\n      this.categories = await categoriesService.query();\n      this.loading = false;\n    },\n    handleChange(event: Event) {\n      const target = event.target as HTMLInputElement;\n      const category_id = parseInt(target.value);\n      \n      if(target.checked) {\n        this.selected.push(category_id);\n      } else {\n        this.selected = this.selected.filter(id => id !== category_id);\n      }\n\n      this.$emit('change', this.selected);\n    }\n  }\n})\n</script>\n"]}]}